R
python
1+1
RVs <- 4
RVs <- sample(c(0,1), replace=TRUE, size=RVs)
recursiveApproach <- function(myVector,n){
if (n > 4){
return(1)
}
return(sqrt(0.5 + myVector[n]*recursiveApproach(myVector, n+1)))
}
recursiveApproach(RVs, 1)
R.version.string
rm(list = ls())
k <- 500
results <- c()
while (k > 0) {
RVs <- 1000
RVs <- sample(c(0,1), replace=TRUE, size=RVs)
results <- append(results, recursiveSquareRootBuilder(RVs, 1))
}
results
recursiveSquareRootBuilder <- function(myVector,n){
if (n > 4){
return(1)
}
return(sqrt(0.5 + myVector[n]*recursiveSquareRootBuilder(myVector, n+1)))
}
k <- 500
results <- c()
while (k > 0) {
RVs <- 1000
RVs <- sample(c(0,1), replace=TRUE, size=RVs)
results <- append(results, recursiveSquareRootBuilder(RVs, 1))
}
my_data <- read.table(file = "C:\MyProjects\_ASDS\Econometrics_Homeworks\Homework_3\sources",
sep = "\t", header=TRUE)
my_data <- read.table(file = "C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources",
sep = "\t", header=TRUE)
my_data <- read.table(file = "C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources",
sep = "\t", header=TRUE)
library("readxl")
library("readxl")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
updateR()
library("readxl")
library('readxl')
install.packages("xlsx")
library("xlsx")
my_data <- read_excel("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.xls")
install.packages("readxl")
library("readxl")
my_data <- read_excel("my_file.xls")
my_data <- read_excel("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.xls")
my_data
my_data <- read_excel("ddxk.xlsx")
my_data <- read_excel("C:\MyProjects\_ASDS\Econometrics_Homeworks\Homework_3\ddxk.xlsx")
my_data <- read_excel("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/ddxk.xlsx")
my_data
require(xlsReadWrite)
install.packages("xlsReadWrite")
install.packages("xlsx")
library("xlsx")
install.packages("xlsx")
my_data <- read_excel("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights")
getwd()
setwd("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3")
getwd()
df <- read.table("ddxk.xlsx",
header = TRUE)
df
df <- read.xlsx2("ddxk.xlsx",
header = TRUE)
df
df <- read.xlsx2("ddxk",
header = TRUE)
df
rm(list = ls())
df <- read.xlsx2("ddxk",
header = TRUE)
df
class(df)
rm(list = ls())
df <- read.xls("bankloan_cs_noweights.xls",
perl="C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources")
class(df)
ddxk <- read.xls("bankloan_cs_noweights.xls",
perl="C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources")
class(ddxk)
dat = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
dat
names(dat)
dim(dat)
rm(list = ls())
Bankloan = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
Output = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/Output logistic.csv", header = TRUE)
print(dim(Bankloan))
print(dim(Output))
rm(list = ls())
Bankloan = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
Output = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/Outputlogistic.csv", header = TRUE)
print(dim(Bankloan))
print(dim(Output))
Bankloan = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
print(dim(Bankloan))
Output = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/Outputlogistic.csv", header = TRUE)
rm(list = ls())
Bankloan = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
print(dim(Bankloan))
rm(list = ls())
Bankloan = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
print(dim(Bankloan))
dim(Bankloan)
Bankloan
rm(list = ls())
data.raw = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
#This data has blanks.  Let's convert the blanks to "NA"
data.raw[data.raw==""]  <- NA
View(data.raw)
#Check for missing values using the sapply() function
sapply(data.raw, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(data.raw, function(x) length(unique(x)))
rm(list = ls())
data.raw = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
#This data has blanks.  Let's convert the blanks to "NA"
data.raw[data.raw==""]  <- NA
View(data.raw)
#Check for missing values using the sapply() function
sapply(data.raw, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(data.raw, function(x) length(unique(x)))
R.version.string
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
# updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
library(installr)
} #load / install+load installr
# using the package:
# updateR()
overall_survival_rate = sum(data.raw$default == 1)/length(data.raw$Survived)
overall_survival_rate
overall_survival_rate = sum(data.raw$default == 1)/length(data.raw$default)
overall_survival_rate
cat("Fraction of people who default = ", format(overall_survival_rate, digits = 3))
names(data.raw)
data.raw$ed
data.raw$ed<-as.factor(data.raw$ed)
data.raw
dim(data.raw)
levels(data.raw$ed)
dim(data.raw)
contrasts(data.raw$ed)
dim(data.raw)
levels(data.raw$ed)
contrasts(data.raw$ed)
createDummyFeatures(data.raw, cols = "ed")
library(mlr)
install.packages("mlr")
library(mlr)
createDummyFeatures(data.raw, cols = "ed")
rm(list = ls())
install.packages("titanic")
library(titanic)
data.raw = titanic_train
dim(data.raw)
View(data.raw)
#This data has blanks.  Let's convert the blanks to "NA"
data.raw[data.raw==""]  <- NA
View(data.raw)
# View(data.raw)
#Check for missing values using the sapply() function
sapply(data.raw, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(data.raw, function(x) length(unique(x)))
# A few basic ratios from the data:
overall_survival_rate = sum(data.raw$Survived == 1)/length(data.raw$Survived)
cat("Fraction of people who survivied = ", format(overall_survival_rate, digits = 3))
male_survival_rate = sum((data.raw$Survived == 1) & (data.raw$Sex == "male"))/sum(data.raw$Sex == "male")
cat("Fraction of men who survivied = ", format(male_survival_rate, digits = 3))
female_survival_rate = sum((data.raw$Survived == 1) & (data.raw$Sex == "female"))/sum(data.raw$Sex == "female")
cat("Fraction of women who survivied = ", format(female_survival_rate, digits = 3))
class1_survival_rate = sum((data.raw$Survived == 1) & (data.raw$Pclass == 1))/sum(data.raw$Pclass == 1)
cat("Fraction of 1st class passengers who survivied = ", format(class1_survival_rate, digits = 3))
class2_survival_rate = sum((data.raw$Survived == 1) & (data.raw$Pclass == 2))/sum(data.raw$Pclass == 2)
cat("Fraction of 2nd class passengers who survivied = ", format(class2_survival_rate, digits = 3))
class3_survival_rate = sum((data.raw$Survived == 1) & (data.raw$Pclass == 3))/sum(data.raw$Pclass == 3)
cat("Fraction of 3rd class passengers who survivied = ", format(class3_survival_rate, digits = 3))
data.T <- na.omit(subset(data.raw,select=c(2,3,5))) #keep only Survived, Pclass, and Sex
table(data.T)
prop.table(table(data.raw$Survived))
prop.table(table(data.raw$Sex))
prop.table(table(data.raw$Pclass))
# Let's drop the columns that we know we are not going to use:
# 1=PassengerId, 4=Name, 9=Ticket, 11=Cabin
data.new <- subset(data.raw,select=c(2,3,5,6,7,8,10,12))
View(data.new)
# View(data.new)
data.new$Survived<-as.factor(data.new$Survived)
data.new$Sex<-as.factor(data.new$Sex)
data.new$Pclass<-as.factor(data.new$Pclass)
data.new$Embarked<-as.factor(data.new$Embarked)
levels(data.new$Pclass)
contrasts(data.new$Pclass)
dim(data.new)
names(data.new)
model <- glm(Survived ~ .,family=binomial(link='logit'),data=data.new)
summary(model)
rm(list = ls())
dat = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
#This data has blanks.  Let's convert the blanks to "NA"
dat[dat==""]  <- NA
#Check for missing values using the sapply() function
sapply(dat, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(dat, function(x) length(unique(x)))
overall_survival_rate = sum(dat$default == 1)/length(dat$default)
overall_survival_rate
overall_survival_rate = sum(dat$default == 1)/length(dat$default)
overall_survival_rate
dat$ed<-as.factor(dat$ed)
dim(dat)
levels(dat$ed)
contrasts(dat$ed)
rm(list = ls())
dat = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
levels(dat$ed)
contrasts(dat$ed)
rm(list = ls())
dat = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
#This data has blanks.  Let's convert the blanks to "NA"
dat[dat==""]  <- NA
#Check for missing values using the sapply() function
sapply(dat, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(dat, function(x) length(unique(x)))
overall_survival_rate = sum(dat$default == 1)/length(dat$default)
overall_survival_rate
cat("Fraction of people who've default = ", format(overall_survival_rate, digits = 3))
dat$ed<-as.factor(dat$ed)
dim(dat)
levels(dat$ed)
contrasts(dat$ed)
rm(list = ls())
dat = read.csv("C:/MyProjects/_ASDS/Econometrics_Homeworks/Homework_3/sources/bankloan_cs_noweights.csv", header = TRUE)
#This data has blanks.  Let's convert the blanks to "NA"
dat[dat==""]  <- NA
#Check for missing values using the sapply() function
sapply(dat, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(dat, function(x) length(unique(x)))
dat$ed<-as.factor(dat$ed)
dim(dat)
levels(dat$ed)
contrasts(dat$ed)
dim(dat)
dat$ed
table(dat$ed)
dat
dat
names(dat)
dat[,c("age","ed","employ","address","income","debtinc","creddebt","othdebt")]
# dat[,c("age","ed","employ","address","income","debtinc","creddebt","othdebt")]
dat.small <- dat[,c("age","ed","employ","address","income","debtinc","creddebt","othdebt")]
dat.small
dat.small <- dat[,c("age","ed","employ","address","income","debtinc","creddebt","othdebt", "default")]
model1 <- glm(default ~ . , family=binomial(link='logit'),data=dat.small)
summary(model1)
class(dat.small$income)
dat.small$income <- as.double(dat.small$income)
class(dat.small$income)
model1 <- glm(default ~ . , family=binomial(link='logit'),data=dat.small)
summary(model1)
rm(list = ls())
install.packages("titanic")
library(titanic)
install.packages("titanic")
data.raw = titanic_train
dim(data.raw)
library(titanic)
data.raw = titanic_train
dim(data.raw)
#This data has blanks.  Let's convert the blanks to "NA"
data.raw[data.raw==""]  <- NA
# View(data.raw)
#Check for missing values using the sapply() function
sapply(data.raw, function(x) sum(is.na(x)))
#if you want to see how may unique values there are for each column:
sapply(data.raw, function(x) length(unique(x)))
data.T <- na.omit(subset(data.raw,select=c(2,3,5))) #keep only Survived, Pclass, and Sex
table(data.T)
prop.table(table(data.raw$Survived))
prop.table(table(data.raw$Sex))
prop.table(table(data.raw$Pclass))
# Let's drop the columns that we know we are not going to use:
# 1=PassengerId, 4=Name, 9=Ticket, 11=Cabin
data.new <- subset(data.raw,select=c(2,3,5,6,7,8,10,12))
data.new$Survived<-as.factor(data.new$Survived)
data.new$Sex<-as.factor(data.new$Sex)
data.new$Pclass<-as.factor(data.new$Pclass)
data.new$Embarked<-as.factor(data.new$Embarked)
names(data.new)
model <- glm(Survived ~ .,family=binomial(link='logit'),data=data.new)
summary(model)
#use the anova function to compare the addition of each variable
anova(model, test="Chisq")
data.small <- na.omit(subset(data.new,select=c(1,2,3,4,5)))
model1 <- glm(Survived ~ .,family=binomial(link='logit'),data=data.small)
summary(model1)
#confidence intervals for the coefficients
confint(model)
